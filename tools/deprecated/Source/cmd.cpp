#include <windows.h>
#include "StdAfx.h"
#include <errno.h>
#include <libusb.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <tchar.h>

#define MY_VID	0x0314 //0x0314
#define MY_PID	0xE457   //0xE457


// Global Variables

	struct libusb_device **devs;    
    struct libusb_device_handle *MyLibusbDeviceHandle = NULL;    
    

int setupUSB () {


    libusb_init(NULL); /* initialize the library */
	
	libusb_get_device_list(NULL, &devs);
	
	//Now look through the list that we just populated.  We are trying to see if any of them match our device.
	MyLibusbDeviceHandle = libusb_open_device_with_vid_pid (NULL,MY_VID,MY_PID); //Opens a USB device

	if(MyLibusbDeviceHandle == NULL)
	{
		System::Windows::Forms::MessageBox::Show("PIN2DMD not found");
		return 1;
	}
	
	libusb_free_device_list(devs, 1);

	if(libusb_claim_interface(MyLibusbDeviceHandle, 0) < 0)  //claims the interface with the Operating System
	{
		//Closes a device opened since the claim interface is failed.
		libusb_close(MyLibusbDeviceHandle);
		System::Windows::Forms::MessageBox::Show("PIN2DMD not found");
		return 1;
	}
}

void releaseUSB() {

	libusb_release_interface(MyLibusbDeviceHandle, 0);
	//closes a device opened
	libusb_close(MyLibusbDeviceHandle);

}


void sendPalText (char *fileName){

    char szValue[255];
	char szValue2[255];
	static UINT32 color_num_pals;
	static int color_default_pal;
	static UINT32 color_persistent_pal;
	static UINT32* color_pal = 0;
	const int num_cols = 16;
	unsigned char *OutputPacketBuffer;
	
	OutputPacketBuffer = (unsigned char *)malloc(2052);
	memset(OutputPacketBuffer,0,2052);

	if (setupUSB()) { return; }

	GetPrivateProfileString("palettes", "npalettes", "ERROR", szValue, 254, fileName);
		if ( strcmp(szValue,"ERROR") == 0) //error
		{System::Windows::Forms::MessageBox::Show("File Error");}
		else // success
		{
			color_num_pals = atoi(szValue);
			GetPrivateProfileString("palettes", "persistentpalette", "ERROR", szValue, 254, fileName);
			if ( strcmp(szValue,"ERROR") == 0) //error 
				{System::Windows::Forms::MessageBox::Show("File Error");
				return;}
				color_persistent_pal = atoi(szValue);

			GetPrivateProfileString("palettes", "defaultpalette", "ERROR", szValue, 254, fileName);
			if ( strcmp(szValue,"ERROR") == 0) //error 
				{System::Windows::Forms::MessageBox::Show("File Error");
				return;}
			color_default_pal = atoi(szValue);
			color_pal = (UINT32*)malloc(num_cols*sizeof(UINT32));
			int i;
			int j;
			// send palettes
			for (i=0;i<color_num_pals;i++) {
				OutputPacketBuffer[0] = 0x81;		  
				OutputPacketBuffer[1] = 0xc3;
				OutputPacketBuffer[2] = 0xe7;
				OutputPacketBuffer[3] = 0xff;		  
				OutputPacketBuffer[4] = 0x04;
				OutputPacketBuffer[5] = i;
				if (i == color_default_pal) {
					if (color_persistent_pal == 1) {
						OutputPacketBuffer[6] = 1;
					} else {
						OutputPacketBuffer[6] = 2;
					}
				} else { 
				OutputPacketBuffer[6] = 0;
				}
				int paletteNoI=strlen("palette")+4;
				char* paletteNo = (char*)malloc(paletteNoI);
				strcpy_s (paletteNo,paletteNoI,"palette");
				char str[4];
				sprintf(str, "%d", i);
				strcat_s (paletteNo,paletteNoI,str);
				GetPrivateProfileString("palettes", paletteNo, "ERROR", szValue, 254, fileName);
				if ( strcmp(szValue,"ERROR") == 0) //error 
					{System::Windows::Forms::MessageBox::Show("File Error");
				return;}
				int pos;
				pos = strcspn(szValue, ",");
				strcpy(szValue2,szValue+pos+1);
				sscanf(szValue2,"%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x",color_pal,color_pal+1,color_pal+2,color_pal+3,color_pal+4,color_pal+5,color_pal+6,color_pal+7,color_pal+8,color_pal+9,color_pal+10,color_pal+11,color_pal+12,color_pal+13,color_pal+14,color_pal+15);
				for (j=0;j<num_cols;j++) {
					OutputPacketBuffer[7+(3*j)] = (color_pal[j] & 0x00ff0000) >> 16;	
					OutputPacketBuffer[8+(3*j)] = (color_pal[j] & 0x0000ff00) >> 8;
					OutputPacketBuffer[9+(3*j)] = (color_pal[j] & 0x000000ff);
				}
				//Writes data to a bulk endpoint. 
				libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052,NULL, 5000);
				Sleep(50);
			}
			
			releaseUSB();
			
			free(OutputPacketBuffer);

			// Exit program
			return;
	}
};

void sendPalAlt (char *fileName){
	
	FILE *file;
	unsigned char *OutputPacketBuffer;
	OutputPacketBuffer = (unsigned char *)malloc(2052);
	memset(OutputPacketBuffer,0,2052);

	static UINT32 color_stamp;
	static UINT32 color_num_pals;
	static int color_default_pal;
	static int color_persistent_pal;
	static UINT32* color_pal = 0;
	const int num_cols = 16;
	
	if (setupUSB()) { return; }

    // Open the specified file in binary mode ("rb")
    file = fopen(fileName, "r");
 
    // If the file wasn't opened successfully, print an error and close
    if(file == NULL)
    {
        System::Windows::Forms::MessageBox::Show("File Error");
        return;
    }
 
	fscanf(file, "%x", &color_stamp);
	fscanf(file, "%u", &color_num_pals);
	fscanf(file, "%i", &color_default_pal);
	fscanf(file, "%i", &color_persistent_pal);
		
	int j;
	int i;
	color_pal = (UINT32*)malloc(num_cols*sizeof(UINT32));
	// send palettes
	for (i=0;i<color_num_pals;i++) {
		unsigned char OutputPacketBuffer[2052] = {0}; //Allocate a memory buffer which will contain data to send to the USB device
		OutputPacketBuffer[0] = 0x81;		  
		OutputPacketBuffer[1] = 0xc3;
		OutputPacketBuffer[2] = 0xe7;
		OutputPacketBuffer[3] = 0xff;		  
		OutputPacketBuffer[4] = 0x04;
		OutputPacketBuffer[5] = i;
		if (i == color_default_pal) {
			if (color_persistent_pal == 1) {
				OutputPacketBuffer[6] = 1;
			} else {
				OutputPacketBuffer[6] = 2;
			}
		} else { 
			OutputPacketBuffer[6] = 0;
		}
		fscanf(file,"%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x,%x",color_pal,color_pal+1,color_pal+2,color_pal+3,color_pal+4,color_pal+5,color_pal+6,color_pal+7,color_pal+8,color_pal+9,color_pal+10,color_pal+11,color_pal+12,color_pal+13,color_pal+14,color_pal+15);
		for (j=0;j<num_cols;j++) {
			OutputPacketBuffer[7+(3*j)] = (color_pal[j] & 0x00ff0000) >> 16;	
			OutputPacketBuffer[8+(3*j)] = (color_pal[j] & 0x0000ff00) >> 8;
			OutputPacketBuffer[9+(3*j)] = (color_pal[j] & 0x000000ff);
		}
		//Writes data to a bulk endpoint. 
		libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);
		Sleep(50);
	}
	
    // Free allocated memory and close the file
    fclose(file);
 
	releaseUSB();

	free(OutputPacketBuffer);
	free(color_pal);

    // Exit program
    return;
}
;

void sendPalBinary (char *fileName){
	OutputDebugString (fileName);
	FILE *file;
    int   fileSize;
    char *readBuffer;
	int Pos;
	int number;
	unsigned char *OutputPacketBuffer;
	
	
 
	if (setupUSB()) { return; }

    // Open the specified file in binary mode ("rb")
    file = fopen(fileName, "rb");
 
    // If the file wasn't opened successfully, print an error and close
    if(file == NULL)
    {
        System::Windows::Forms::MessageBox::Show("File Error");
        return;
    }
 
    // Determine the file size
    fseek(file, 0L, SEEK_END);
    fileSize = ftell(file);
    rewind(file);
 
    // Allocate the read buffer
    readBuffer = (char *)malloc(fileSize);
	OutputPacketBuffer = (unsigned char *)malloc(2052);
	memset(OutputPacketBuffer,0,2052);
 
    // Read the file's data into the read buffer
    long read = fread(readBuffer, 1, fileSize, file);
     
	number = readBuffer[2];
	int i;
	// send palettes
	for (i=0;i<number;i++) {
		OutputPacketBuffer[0] = 0x81;		  
		OutputPacketBuffer[1] = 0xc3;
		OutputPacketBuffer[2] = 0xe7;
		OutputPacketBuffer[3] = 0xff;		  
		OutputPacketBuffer[4] = 0x04;
		OutputPacketBuffer[5] = i;
		OutputPacketBuffer[6] = readBuffer[7+(i*53)];
		memcpy(OutputPacketBuffer+7,(readBuffer+8+(i*53)),48);
		
		//Writes data to a bulk endpoint. 
		libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);
		Sleep(50);
	}
	// send keyframes
	Pos = 8+(number*53);
	if (Pos < fileSize) {
		number = readBuffer[Pos-5]*256+readBuffer[Pos-4];
		for (i=0;i<number;i++) {
			unsigned char OutputPacketBuffer[2052] = {0}; //Allocate a memory buffer which will contain data to send to the USB device
			OutputPacketBuffer[0] = 0x81;		  
			OutputPacketBuffer[1] = 0xc3;
			OutputPacketBuffer[2] = 0xe7;
			OutputPacketBuffer[3] = 0xff;		  
			OutputPacketBuffer[4] = 0x05;
			memcpy(OutputPacketBuffer+5,(readBuffer+Pos-3+(i*28)),28);
			//Writes data to a bulk endpoint. 
			libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);
			Sleep(50);
	}
	}
	
    // Free allocated memory and close the file
    free(readBuffer);
	free(OutputPacketBuffer);
    fclose(file);

	releaseUSB();
 
	

    // Exit program
    return;
}
;


void sendSmartDMD (char *fileName){
	OutputDebugString (fileName);
	FILE *file;
    char szValue[255];

	if (setupUSB()) { return; }

	GetPrivateProfileString("smartdmd", "key", "ERROR", szValue, 254, fileName);
		if ( strcmp(szValue,"ERROR") == 0) //error
		{System::Windows::Forms::MessageBox::Show("File Error");}
		else // success
		{
				unsigned char *OutputPacketBuffer;
				OutputPacketBuffer = (unsigned char *)malloc(2052);
				memset(OutputPacketBuffer,0,2052);

				OutputPacketBuffer[0] = 0x81;		  
				OutputPacketBuffer[1] = 0xc3;
				OutputPacketBuffer[2] = 0xe7;
				OutputPacketBuffer[3] = 0xff;		  
				OutputPacketBuffer[4] = 0x06;
				sscanf(szValue,"%x,%x,%x,%x,%x,%x,%x,%x",&OutputPacketBuffer[5],&OutputPacketBuffer[6],&OutputPacketBuffer[7],&OutputPacketBuffer[8],&OutputPacketBuffer[9],&OutputPacketBuffer[10],&OutputPacketBuffer[11],&OutputPacketBuffer[12]);
				//Writes data to a bulk endpoint. 
				libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);
				Sleep(50);
				free(OutputPacketBuffer);
			}
			
	releaseUSB();
			
	// Exit program
	return;
	
};


void sendConfig (char cmd1, char cmd2) {
					
				 unsigned char *OutputPacketBuffer;
				 
				 if (setupUSB()) { return; }
				 
				 OutputPacketBuffer = (unsigned char *)malloc(2052);
				 memset(OutputPacketBuffer,0,2052);

				 OutputPacketBuffer[0] = 0x81;		  
				 OutputPacketBuffer[1] = 0xc3;
				 OutputPacketBuffer[2] = 0xe7;
				 OutputPacketBuffer[3] = 0xff;		  
				 OutputPacketBuffer[4] = cmd1;
				 OutputPacketBuffer[5] = cmd2;

				 //Writes data to a bulk endpoint. 
	 			 libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);

				 releaseUSB();

				 free(OutputPacketBuffer);
}

void sendReset (void) {

				unsigned char *OutputPacketBuffer;
				
				if (setupUSB()) { return; } 

				 OutputPacketBuffer = (unsigned char *)malloc(2052);
				 memset(OutputPacketBuffer,0,2052);

				 OutputPacketBuffer[0] = 0x81;		  
				 OutputPacketBuffer[1] = 0xc3;
				 OutputPacketBuffer[2] = 0xe7;
				 OutputPacketBuffer[3] = 0xff;		  
				 OutputPacketBuffer[4] = 0x00;

				 //Writes data to a bulk endpoint. 
	 			 libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);

				 releaseUSB();

				 free(OutputPacketBuffer);
}

void sendClearSettings (void) {
				
				 unsigned char *OutputPacketBuffer;
				
				 if (setupUSB()) { return; } 

				 OutputPacketBuffer = (unsigned char *)malloc(2052);
				 memset(OutputPacketBuffer,0,2052);

				 OutputPacketBuffer[0] = 0x81;		  
				 OutputPacketBuffer[1] = 0xc3;
				 OutputPacketBuffer[2] = 0xe7;
				 OutputPacketBuffer[3] = 0xff;		  
				 OutputPacketBuffer[4] = 0x07;

				 //Writes data to a bulk endpoint. 
	 			 libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052,NULL, 5000);

				releaseUSB();

				free(OutputPacketBuffer);
}

void sendDisplayTimings (int T0, int T1, int T2, int T3, int T4) {
				
				 unsigned char *OutputPacketBuffer;
				
				 if (setupUSB()) { return; } 

				 OutputPacketBuffer = (unsigned char *)malloc(2052);
				 memset(OutputPacketBuffer,0,2052);

				 OutputPacketBuffer[0] = 0x81;		  
				 OutputPacketBuffer[1] = 0xc3;
				 OutputPacketBuffer[2] = 0xe7;
				 OutputPacketBuffer[3] = 0xff;		  
				 OutputPacketBuffer[4] = 0x08;
				 OutputPacketBuffer[5] = T0>>8;
				 OutputPacketBuffer[6] = T0;
				 OutputPacketBuffer[7] = T1>>8;
				 OutputPacketBuffer[8] = T1;
				 OutputPacketBuffer[9] = T2>>8;
				 OutputPacketBuffer[10] = T2;
				 OutputPacketBuffer[11] = T3>>8;
				 OutputPacketBuffer[12] = T3;
				 OutputPacketBuffer[13] = T4>>8;
				 OutputPacketBuffer[14] = T4;
				 //Writes data to a bulk endpoint. 
	 			 libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);
				 Sleep(50);
				releaseUSB();

				free(OutputPacketBuffer);
}

void sendLogo (void) {
				
			unsigned char OutputPacketBuffer[2052] =  { 0x81,0xc3,0xe7,0x00,
				0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,
				0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,
				0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,
				0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,
				0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,
				0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,
				0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,
				0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,0x00,0x7F,
				0x00,0x7F,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0xF0,0xFF,0xC1,0xF3,0x03,0x1C,0xFF,0x1F,0xFF,0x3F,0x78,0x00,
				0xF0,0xF9,0xFF,0x01,0xF0,0xFF,0xC3,0xF3,0x07,0x9C,0xFF,0x3F,0xFF,0x7F,0xF8,0x00,
				0xF8,0xF9,0xFF,0x03,0xF0,0xFF,0xC7,0xF3,0x0F,0x9C,0xFF,0x3F,0x0F,0xF8,0xF8,0x01,
				0xFC,0x79,0xC0,0x07,0xF0,0x80,0xCF,0xF3,0x1F,0x1C,0x00,0x3C,0x0F,0xF0,0xF9,0x03,
				0xFE,0x79,0x80,0x0F,0xF0,0x00,0xCF,0x73,0x3F,0x1C,0x00,0x3C,0x0F,0xE0,0xF9,0x07,
				0xFF,0x79,0x00,0x0F,0xF0,0x00,0xCF,0x73,0x7E,0x1C,0xFE,0x3F,0x0F,0xE0,0xF9,0x8F,
				0xFF,0x79,0x00,0x0F,0xF0,0x80,0xCF,0x73,0xFC,0x1C,0xFF,0x1F,0x0F,0xE0,0x79,0xDF,
				0xE7,0x79,0x00,0x0F,0xF0,0xFF,0xC7,0x73,0xF8,0x9D,0xFF,0x0F,0x0F,0xE0,0x79,0xFE,
				0xE3,0x79,0x00,0x0F,0xF0,0xFF,0xC3,0x73,0xF0,0x9F,0x07,0x00,0x0F,0xF0,0x79,0xFC,
				0xE1,0x79,0x80,0x0F,0xF0,0xFF,0xC1,0x73,0xE0,0x9F,0x07,0x00,0x0F,0xF8,0x79,0xF8,
				0xE0,0x79,0xC0,0x0F,0xF0,0x00,0xC0,0x73,0xC0,0x9F,0xFF,0x3F,0xFF,0xFF,0x78,0x70,
				0xE0,0xF9,0xFF,0x07,0xF0,0x00,0xC0,0x73,0x80,0x9F,0xFF,0x3F,0xFF,0x7F,0x78,0x20,
				0xE0,0xF9,0xFF,0x03,0xF0,0x00,0xC0,0x73,0x00,0x9F,0xFF,0x3F,0xFF,0x3F,0x78,0x00,
				0xE0,0xF9,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,

				0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,
				0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,
				0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,
				0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,
				0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,
				0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,
				0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,
				0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x00,0x00,0x7F,0x7F,
				0x00,0x00,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0xF0,0xFF,0xC1,0xF3,0x03,0x1C,0xFF,0x1F,0xFF,0x3F,0x78,0x00,
				0xF0,0xF9,0xFF,0x01,0xF0,0xFF,0xC3,0xF3,0x07,0x9C,0xFF,0x3F,0xFF,0x7F,0xF8,0x00,
				0xF8,0xF9,0xFF,0x03,0xF0,0xFF,0xC7,0xF3,0x0F,0x9C,0xFF,0x3F,0x0F,0xF8,0xF8,0x01,
				0xFC,0x79,0xC0,0x07,0xF0,0x80,0xCF,0xF3,0x1F,0x1C,0x00,0x3C,0x0F,0xF0,0xF9,0x03,
				0xFE,0x79,0x80,0x0F,0xF0,0x00,0xCF,0x73,0x3F,0x1C,0x00,0x3C,0x0F,0xE0,0xF9,0x07,
				0xFF,0x79,0x00,0x0F,0xF0,0x00,0xCF,0x73,0x7E,0x1C,0xFE,0x3F,0x0F,0xE0,0xF9,0x8F,
				0xFF,0x79,0x00,0x0F,0xF0,0x80,0xCF,0x73,0xFC,0x1C,0xFF,0x1F,0x0F,0xE0,0x79,0xDF,
				0xE7,0x79,0x00,0x0F,0xF0,0xFF,0xC7,0x73,0xF8,0x9D,0xFF,0x0F,0x0F,0xE0,0x79,0xFE,
				0xE3,0x79,0x00,0x0F,0xF0,0xFF,0xC3,0x73,0xF0,0x9F,0x07,0x00,0x0F,0xF0,0x79,0xFC,
				0xE1,0x79,0x80,0x0F,0xF0,0xFF,0xC1,0x73,0xE0,0x9F,0x07,0x00,0x0F,0xF8,0x79,0xF8,
				0xE0,0x79,0xC0,0x0F,0xF0,0x00,0xC0,0x73,0xC0,0x9F,0xFF,0x3F,0xFF,0xFF,0x78,0x70,
				0xE0,0xF9,0xFF,0x07,0xF0,0x00,0xC0,0x73,0x80,0x9F,0xFF,0x3F,0xFF,0x7F,0x78,0x20,
				0xE0,0xF9,0xFF,0x03,0xF0,0x00,0xC0,0x73,0x00,0x9F,0xFF,0x3F,0xFF,0x3F,0x78,0x00,
				0xE0,0xF9,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0xF0,0xC7,0x1F,0xFF,0x3C,0xC6,0x0F,0x7F,0x0C,0xE6,0x0F,
				0x7F,0xFC,0x03,0x00,0x00,0x38,0xCE,0x30,0x03,0x3C,0x66,0x98,0xE3,0x0C,0x66,0x98,
				0xE3,0x0C,0x00,0x00,0x00,0x18,0xCC,0x30,0x03,0x6C,0x66,0x80,0xC1,0x0C,0x66,0x98,
				0xC1,0x0C,0x00,0x00,0x00,0x18,0xCC,0x30,0x7F,0xEC,0xE6,0x9F,0xC1,0x0C,0x66,0x88,
				0x01,0xFC,0x01,0x00,0x00,0x18,0xCC,0x1F,0x03,0xCC,0x07,0x98,0xC1,0x0C,0xE6,0x9F,
				0xC1,0x0C,0x00,0x00,0x00,0x38,0xCE,0x00,0x03,0x8C,0x67,0x98,0xE3,0x1C,0x67,0x98,
				0xE3,0x0C,0x00,0x00,0x00,0xF0,0xC7,0x00,0xFF,0x0C,0xC7,0x0F,0x7F,0xF8,0x63,0x18,
				0x7F,0xFC,0x03,0x00,

				0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0xF0,0xFF,0xC1,0xF3,0x03,0x1C,0xFF,0x1F,0xFF,0x3F,0x78,0x00,
				0xF0,0xF9,0xFF,0x01,0xF0,0xFF,0xC3,0xF3,0x07,0x9C,0xFF,0x3F,0xFF,0x7F,0xF8,0x00,
				0xF8,0xF9,0xFF,0x03,0xF0,0xFF,0xC7,0xF3,0x0F,0x9C,0xFF,0x3F,0x0F,0xF8,0xF8,0x01,
				0xFC,0x79,0xC0,0x07,0xF0,0x80,0xCF,0xF3,0x1F,0x1C,0x00,0x3C,0x0F,0xF0,0xF9,0x03,
				0xFE,0x79,0x80,0x0F,0xF0,0x00,0xCF,0x73,0x3F,0x1C,0x00,0x3C,0x0F,0xE0,0xF9,0x07,
				0xFF,0x79,0x00,0x0F,0xF0,0x00,0xCF,0x73,0x7E,0x1C,0xFE,0x3F,0x0F,0xE0,0xF9,0x8F,
				0xFF,0x79,0x00,0x0F,0xF0,0x80,0xCF,0x73,0xFC,0x1C,0xFF,0x1F,0x0F,0xE0,0x79,0xDF,
				0xE7,0x79,0x00,0x0F,0xF0,0xFF,0xC7,0x73,0xF8,0x9D,0xFF,0x0F,0x0F,0xE0,0x79,0xFE,
				0xE3,0x79,0x00,0x0F,0xF0,0xFF,0xC3,0x73,0xF0,0x9F,0x07,0x00,0x0F,0xF0,0x79,0xFC,
				0xE1,0x79,0x80,0x0F,0xF0,0xFF,0xC1,0x73,0xE0,0x9F,0x07,0x00,0x0F,0xF8,0x79,0xF8,
				0xE0,0x79,0xC0,0x0F,0xF0,0x00,0xC0,0x73,0xC0,0x9F,0xFF,0x3F,0xFF,0xFF,0x78,0x70,
				0xE0,0xF9,0xFF,0x07,0xF0,0x00,0xC0,0x73,0x80,0x9F,0xFF,0x3F,0xFF,0x7F,0x78,0x20,
				0xE0,0xF9,0xFF,0x03,0xF0,0x00,0xC0,0x73,0x00,0x9F,0xFF,0x3F,0xFF,0x3F,0x78,0x00,
				0xE0,0xF9,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,

				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x7F,0x7F,0x7F,
				0x7F,0x7F,0x7F,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0xF0,0xFF,0xC1,0xF3,0x03,0x1C,0xFF,0x1F,0xFF,0x3F,0x78,0x00,
				0xF0,0xF9,0xFF,0x01,0xF0,0xFF,0xC3,0xF3,0x07,0x9C,0xFF,0x3F,0xFF,0x7F,0xF8,0x00,
				0xF8,0xF9,0xFF,0x03,0xF0,0xFF,0xC7,0xF3,0x0F,0x9C,0xFF,0x3F,0x0F,0xF8,0xF8,0x01,
				0xFC,0x79,0xC0,0x07,0xF0,0x80,0xCF,0xF3,0x1F,0x1C,0x00,0x3C,0x0F,0xF0,0xF9,0x03,
				0xFE,0x79,0x80,0x0F,0xF0,0x00,0xCF,0x73,0x3F,0x1C,0x00,0x3C,0x0F,0xE0,0xF9,0x07,
				0xFF,0x79,0x00,0x0F,0xF0,0x00,0xCF,0x73,0x7E,0x1C,0xFE,0x3F,0x0F,0xE0,0xF9,0x8F,
				0xFF,0x79,0x00,0x0F,0xF0,0x80,0xCF,0x73,0xFC,0x1C,0xFF,0x1F,0x0F,0xE0,0x79,0xDF,
				0xE7,0x79,0x00,0x0F,0xF0,0xFF,0xC7,0x73,0xF8,0x9D,0xFF,0x0F,0x0F,0xE0,0x79,0xFE,
				0xE3,0x79,0x00,0x0F,0xF0,0xFF,0xC3,0x73,0xF0,0x9F,0x07,0x00,0x0F,0xF0,0x79,0xFC,
				0xE1,0x79,0x80,0x0F,0xF0,0xFF,0xC1,0x73,0xE0,0x9F,0x07,0x00,0x0F,0xF8,0x79,0xF8,
				0xE0,0x79,0xC0,0x0F,0xF0,0x00,0xC0,0x73,0xC0,0x9F,0xFF,0x3F,0xFF,0xFF,0x78,0x70,
				0xE0,0xF9,0xFF,0x07,0xF0,0x00,0xC0,0x73,0x80,0x9F,0xFF,0x3F,0xFF,0x7F,0x78,0x20,
				0xE0,0xF9,0xFF,0x03,0xF0,0x00,0xC0,0x73,0x00,0x9F,0xFF,0x3F,0xFF,0x3F,0x78,0x00,
				0xE0,0xF9,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
				0x00,0x00,0x00,0x00,0x00,0xF0,0xC7,0x1F,0xFF,0x3C,0xC6,0x0F,0x7F,0x0C,0xE6,0x0F,
				0x7F,0xFC,0x03,0x00,0x00,0x38,0xCE,0x30,0x03,0x3C,0x66,0x98,0xE3,0x0C,0x66,0x98,
				0xE3,0x0C,0x00,0x00,0x00,0x18,0xCC,0x30,0x03,0x6C,0x66,0x80,0xC1,0x0C,0x66,0x98,
				0xC1,0x0C,0x00,0x00,0x00,0x18,0xCC,0x30,0x7F,0xEC,0xE6,0x9F,0xC1,0x0C,0x66,0x88,
				0x01,0xFC,0x01,0x00,0x00,0x18,0xCC,0x1F,0x03,0xCC,0x07,0x98,0xC1,0x0C,0xE6,0x9F,
				0xC1,0x0C,0x00,0x00,0x00,0x38,0xCE,0x00,0x03,0x8C,0x67,0x98,0xE3,0x1C,0x67,0x98,
				0xE3,0x0C,0x00,0x00,0x00,0xF0,0xC7,0x00,0xFF,0x0C,0xC7,0x0F,0x7F,0xF8,0x63,0x18,
				0x7F,0xFC,0x03,0x00};
			
				if (setupUSB()) { return; }

				 //Writes data to a bulk endpoint. 
	 			 libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);

				releaseUSB();
}




void sendPPM (char *fileName) {
	
	FILE *file;
    int   fileSize;
    char *readBuffer;
	unsigned char *OutputPacketBuffer; 

	if (setupUSB()) { return; }

    // Open the specified file in binary mode ("rb")
    file = fopen(fileName, "rb");
 
    // If the file wasn't opened successfully, print an error and close
    if(file == NULL)
    {
        System::Windows::Forms::MessageBox::Show("File open error");
        return;
    }
 
    // Determine the file size
    fseek(file, 0L, SEEK_END);
    fileSize = ftell(file);
	if (fileSize != 12302) {
		System::Windows::Forms::MessageBox::Show("Wrong file format");
		return;
	}
    rewind(file);
 
    // Allocate the read buffer
    readBuffer = (char *)malloc(fileSize);
	OutputPacketBuffer = (unsigned char *)malloc(16388);
	memset(OutputPacketBuffer,0,16388);
    // Read the file's data into the read buffer
    long read = fread(readBuffer, 1, fileSize, file);

	OutputPacketBuffer[0] = 0x81;		  
	OutputPacketBuffer[1] = 0xc3;
	OutputPacketBuffer[2] = 0xe8;
	OutputPacketBuffer[3] = 0x00;
	int i;
	int k=0;
	for (i=0;i<4096;i++) {
		OutputPacketBuffer[4+0+i] = ((readBuffer[14+k]>>4)&1) | ((readBuffer[15+k]>>3)&2) | ((readBuffer[16+k]>>2)&4) | ((readBuffer[14+6144+k]>>1)&8) | ((readBuffer[15+6144+k])&16) | ((readBuffer[16+6144+k]<<1)&32)| (i<<6 & 0x40);
		OutputPacketBuffer[4+4096+i] = ((readBuffer[14+k]>>5)&1) | ((readBuffer[15+k]>>4)&2) | ((readBuffer[16+k]>>3)&4) | ((readBuffer[14+6144+k]>>2)&8) | ((readBuffer[15+6144+k]>>1)&16) | ((readBuffer[16+6144+k])&32) | (i<<6 & 0x40);
		OutputPacketBuffer[4+8192+i] = ((readBuffer[14+k]>>6)&1) | ((readBuffer[15+k]>>5)&2) | ((readBuffer[16+k]>>4)&4) | ((readBuffer[14+6144+k]>>3)&8) | ((readBuffer[15+6144+k]>>2)&16) | ((readBuffer[16+6144+k]>>1)&32) | (i<<6 & 0x40);
		OutputPacketBuffer[4+12288+i] = ((readBuffer[14+k]>>7)&1) | ((readBuffer[15+k]>>6)&2) | ((readBuffer[16+k]>>5)&4) | ((readBuffer[14+6144+k]>>4)&8) | ((readBuffer[15+6144+k]>>3)&16) | ((readBuffer[16+6144+k]>>2)&32) | (i<<6 & 0x40);
		k+=(i & 0x01)*3;
	}

	//Writes data to a bulk endpoint. 
	libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 16388, NULL, 5000);

    // Free allocated memory and close the file
    free(readBuffer);
	free(OutputPacketBuffer);
    fclose(file);
	
	releaseUSB();

    // Exit program
    return;
}

void sendFSQ (char *fileName) {
	
	FILE *file;
    int  NoOfFrameSequences = 0 ;
    int  NoOfFrames = 0;
	int NoOfPlanes = 0;
    int SizeOfPlanes = 0;
    long  Delay = 0;
    
	char *readBuffer;
	unsigned char *OutputPacketBuffer; 

	if (setupUSB()) { return; }

    // Open the specified file in binary mode ("rb")
    file = fopen(fileName, "rb");
 
    // If the file wasn't opened successfully, print an error and close
    if(file == NULL)
    {
        System::Windows::Forms::MessageBox::Show("File open error");
        return;
    }


 
    // Allocate the read buffer
    readBuffer = (char *)malloc(6144);
	OutputPacketBuffer = (unsigned char *)malloc(16388);
	memset(OutputPacketBuffer,0,16388);

	NoOfFrameSequences = fgetc(file)<<8; 
	NoOfFrameSequences |= fgetc(file);
	NoOfFrames = fgetc(file)<<8; 
	NoOfFrames |= fgetc(file);
	int jj;
	for (jj=0;jj<NoOfFrames;jj++) {
		Delay = fgetc(file)<<24; 
		Delay |= fgetc(file)<<16;
		Delay |= fgetc(file)<<8;
		Delay |= fgetc(file);
	
		NoOfPlanes = fgetc(file)<<8; 
		NoOfPlanes |= fgetc(file);

		SizeOfPlanes = fgetc(file)<<8; 
		SizeOfPlanes |= fgetc(file);

		fread(readBuffer, 1, 6144, file);

		OutputPacketBuffer[0] = 0x81;		  
		OutputPacketBuffer[1] = 0xc3;
		OutputPacketBuffer[2] = 0xe8;
		OutputPacketBuffer[3] = 0x00;
		int i;
		int k=0;
		for (k=0;k<256;k++) {
			for (i=0;i<8;i++) {

				OutputPacketBuffer[4+0+(i<<1)+(k*16)] = ((readBuffer[0+k]>>i)<<2)&4 | ((readBuffer[2048+k]>>i)<<1)&2 | ((readBuffer[4096+k]>>i)<<0)&1 | ((readBuffer[256+k]>>i)<<5)&32 | ((readBuffer[2304+k]>>i)<<4)&16 | ((readBuffer[4352+k]>>i)<<3)&8;
				OutputPacketBuffer[4+4096+(i<<1)+(k*16)] = ((readBuffer[512+k]>>i)<<2)&4 | ((readBuffer[2560+k]>>i)<<1)&2 | ((readBuffer[4608+k]>>i)<<0)&1 | ((readBuffer[768+k]>>i)<<5)&32 | ((readBuffer[2816+k]>>i)<<4)&16 | ((readBuffer[4846+k]>>i)<<3)&8;
				OutputPacketBuffer[4+8192+(i<<1)+(k*16)] = ((readBuffer[1024+k]>>i)<<2)&4 | ((readBuffer[3072+k]>>i)<<1)&2 | ((readBuffer[5120+k]>>i)<<0)&1 | ((readBuffer[1280+k]>>i)<<5)&32 | ((readBuffer[3328+k]>>i)<<4)&16 | ((readBuffer[5376+k]>>i)<<3)&8;
				OutputPacketBuffer[4+12288+(i<<1)+(k*16)] = ((readBuffer[1536+k]>>i)<<2)&4 | ((readBuffer[3584+k]>>i)<<1)&2 | ((readBuffer[5632+k]>>i)<<0)&1 | ((readBuffer[1792+k]>>i)<<5)&32 | ((readBuffer[3840+k]>>i)<<4)&16 | ((readBuffer[5888+k]>>i)<<3)&8;
				
				OutputPacketBuffer[4+1+(i<<1)+(k*16)] = ((readBuffer[0+k]>>i)<<2)&4 | ((readBuffer[2048+k]>>i)<<1)&2 | ((readBuffer[4096+k]>>i)<<0)&1 | ((readBuffer[256+k]>>i)<<5)&32 | ((readBuffer[2304+k]>>i)<<4)&16 | ((readBuffer[4352+k]>>i)<<3)&8 | 0x40;
				OutputPacketBuffer[4+4096+1+(i<<1)+(k*16)] = ((readBuffer[512+k]>>i)<<2)&4 | ((readBuffer[2560+k]>>i)<<1)&2 | ((readBuffer[4608+k]>>i)<<0)&1 | ((readBuffer[768+k]>>i)<<5)&32 | ((readBuffer[2816+k]>>i)<<4)&16 | ((readBuffer[4846+k]>>i)<<3)&8 | 0x40;
				OutputPacketBuffer[4+8192+1+(i<<1)+(k*16)] = ((readBuffer[1024+k]>>i)<<2)&4 | ((readBuffer[3072+k]>>i)<<1)&2 | ((readBuffer[5120+k]>>i)<<0)&1 | ((readBuffer[1280+k]>>i)<<5)&32 | ((readBuffer[3328+k]>>i)<<4)&16 | ((readBuffer[5376+k]>>i)<<3)&8 | 0x40;
				OutputPacketBuffer[4+12288+1+(i<<1)+(k*16)] = ((readBuffer[1536+k]>>i)<<2)&4 | ((readBuffer[3584+k]>>i)<<1)&2 | ((readBuffer[5632+k]>>i)<<0)&1 | ((readBuffer[1792+k]>>i)<<5)&32 | ((readBuffer[3840+k]>>i)<<4)&16 | ((readBuffer[5888+k]>>i)<<3)&8 | 0x40;
				
			}
		}
		//Writes data to a bulk endpoint. 
		libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 16388, NULL, 5000);
		Sleep(Delay);
	}
    // Free allocated memory and close the file
    free(readBuffer);
	free(OutputPacketBuffer);
    fclose(file);
	
	releaseUSB();

    // Exit program
    return;
}

void uploadFile (char *fileName){
	OutputDebugString (fileName);
	FILE *file;
    int   fileSize;
    char *readBuffer;
	int ret;
	unsigned char *OutputPacketBuffer;
	unsigned char *ReceivePacketBuffer;
	
	
 
	if (setupUSB()) { return; }

    // Open the specified file in binary mode ("rb")
    file = fopen(fileName, "rb");
 
    // If the file wasn't opened successfully, print an error and close
    if(file == NULL)
    {
        System::Windows::Forms::MessageBox::Show("File Error");
        return;
    }
 
    // Determine the file size
    fseek(file, 0L, SEEK_END);
    fileSize = ftell(file);
    rewind(file);

	int blocks = fileSize / 512;
	 
    // Allocate the read buffer
    readBuffer = (char *)malloc(fileSize);
	OutputPacketBuffer = (unsigned char *)malloc(2052);
	ReceivePacketBuffer = (unsigned char *)malloc(64);
	memset(OutputPacketBuffer,0,2052);
 
    // Read the file's data into the read buffer
    long read = fread(readBuffer, 1, fileSize, file);
     
	int i;
	// send data
	OutputPacketBuffer[0] = 0x81; // header for file transfer
	OutputPacketBuffer[1] = 0xc3;
	OutputPacketBuffer[2] = 0xe7;
	OutputPacketBuffer[3] = 0xff;		  
	OutputPacketBuffer[4] = 0x09;
	
	OutputPacketBuffer[5] = 0x00; // open file
	
	libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052,NULL, 5000);
	ret = libusb_bulk_transfer(MyLibusbDeviceHandle, 0x81, ReceivePacketBuffer,64,NULL,100);
	if (ret<0) {
		releaseUSB();
		System::Windows::Forms::MessageBox::Show("File Open Error");
		return;
	}
	OutputPacketBuffer[5] = 0x01; // send blocks of data
	
	for (i=0;i<blocks;i++) {
		memset(OutputPacketBuffer+6,0x00,2046);
		memcpy(OutputPacketBuffer+64,(readBuffer+(i*512)),512);
		libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);
		ret = libusb_bulk_transfer(MyLibusbDeviceHandle, 0x81, ReceivePacketBuffer,64, NULL, 100);
		if (ret<0) {
			releaseUSB();
			System::Windows::Forms::MessageBox::Show("File Transfer Error");
			return;
		}
	}
		
	memset(OutputPacketBuffer+6,0x00,2046); // send last bytes
	memcpy(OutputPacketBuffer+64,(readBuffer+(blocks*512)),fileSize-(blocks*512));
	libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);
	ret = libusb_bulk_transfer(MyLibusbDeviceHandle, 0x81, ReceivePacketBuffer,64, NULL, 100);
	if (ret<0) {
		releaseUSB();
		System::Windows::Forms::MessageBox::Show("File Transfer Error");
		return;
	}
	
	OutputPacketBuffer[5] = 0xFF; //close file
	memset(OutputPacketBuffer+6,0x00,2046);
	libusb_bulk_transfer(MyLibusbDeviceHandle, 0x01, OutputPacketBuffer , 2052, NULL, 5000);
	ret = libusb_bulk_transfer(MyLibusbDeviceHandle, 0x81, ReceivePacketBuffer,64, NULL, 100);
	if (ret<0) {
		releaseUSB();
		System::Windows::Forms::MessageBox::Show("File Close Error");
		return;
	}
	
    // Free allocated memory and close the file
    free(readBuffer);
	free(OutputPacketBuffer);
    fclose(file);

	releaseUSB();
 
	

    // Exit program
    return;
}
;


